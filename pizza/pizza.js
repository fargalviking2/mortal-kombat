const App = {
	data: () => ({
		/**
			Используй вот такие числовые константы, так проще что-то изменять, проверять и т.д.
			Также в базе данных занимают меньше места, если использовать тип колонки unsigned tiny integer
			Лучше обзавестись папочкой constants и там хранить файлы констант по типу сущности, например:
			pizza.js, cart.js и т.д.

		 	ВАЖНО: Константы не нужно записывать в data вообще, я записал чтоб сократить время
		 	ВАЖНО: Их необходимо импортировать в компоненты

			Также можно использовать константы ввиде объектов, например
			const CONSTANT = {
				value: 1,
				text: 'Пышное тесто'
			}
		 */

		// Константы типа теста
		THIN_DOUGH_TYPE: 1, // Тонкое
		FLUFFY_DOUGH_TYPE: 2, // Пышное

		// Константы размера теста
		SMALL_SIZE: 25,
		MIDDLE_SIZE: 30,
		LARGE_SIZE: 35,

		isOpenCart: false,
		cartCounter: 0,
		cart: [],
		products: {
			/**
			 * Лучше использовать в объекте один прайс, а потом рассчитывать его,
			 * взависимости от параметров, я пишу так, чтоб сократить время.
			 * Но это выглядит примерно так:
			 *
			 * const SMALL_SIZE = {
			 * 	   value: 25
			 *     premium: 100
			 * }
			 * const MIDDLE_SIZE = {
			 * 	   value: 30
			 *     premium: 150
			 * }
			 *
			 * И т.д.
			 *
			 * const totalPrice = price + product.size.premium
			 */
			1: { // Ключ объекта зависит от его id
				img: 'img/lolosos.jpg',
				title: 'Лосось',
				description: 'Филе лосося, сыр моцарелла, сыр креметта, соус Песто, сливочный соус, томаты черри',
				size: 25, // Если константы были бы исмортированы, то не нужно было бы вот так жёстко писать, в люом
				// случае эти данные будут подгружаться из базы данных, поэтому тут это не важно
				dough: 1, // Если константы были бы исмортированы, то не нужно было бы вот так жёстко писать, в люом
				// случае эти данные будут подгружаться из базы данных, поэтому тут это не важно
				smallPrice: 350,
				mediumPrice: 500,
				largePrice: 600,
				totalPrice: 350,
				id: 1
			},
			2: { // Ключ объекта зависит от его id
				img: 'img/lolosos.jpg',
				title: 'MIX',
				description: 'Филе лосося, сыр моцарелла, сыр креметта, соус Песто, сливочный соус, томаты черри',
				size: 25, // Если константы были бы исмортированы, то не нужно было бы вот так жёстко писать, в люом
				// случае эти данные будут подгружаться из базы данных, поэтому тут это не важно
				dough: 1, // Если константы были бы исмортированы, то не нужно было бы вот так жёстко писать, в люом
				// случае эти данные будут подгружаться из базы данных, поэтому тут это не важно
				smallPrice: 400,
				mediumPrice: 600,
				largePrice: 700,
				totalPrice: 400,
				id: 2
			}
		},
	}),
	methods: {
		removeFromCart (product) {
			console.log(product)
		},
		calculateProductPrice (id, size) {
			/**
			 * Я не учитываю толщину теста, дабы сократить время, но всё равно это не очень
			 * качественный код, если сделать рефакторинг и писать по уму, то таких свитчей не должно быть
			 * всё должно будет рассчитывать на бэкенде и возвращаться значения, это долгая тема
			 * для разговора
			 */
			switch (size) {
				case this.SMALL_SIZE:
					this.products[id].totalPrice = this.products[id].smallPrice
					break

				case this.MIDDLE_SIZE:
					this.products[id].totalPrice = this.products[id].mediumPrice
					break

				case this.LARGE_SIZE:
					this.products[id].totalPrice = this.products[id].largePrice
					break

				default:
					this.products[id].totalPrice = this.products[id].smallPrice
					break
			}
		},
		addToCart (id) {
			// Так не делай, я просто не шарю как твоим способом юзать data, нет времени гуглить
			const { cart: data } = JSON.parse(JSON.stringify(this))
			const initial = data.filter(pizza => pizza.id === id).pop()

			/**
			 * Это я написал в учебных целях, но на продакш проектах так делать нельзя
			 * На продакшн проектах используется больше технологий и это всё проще
			 * реализовать. Также я не разделил пиццу по размерам, потому что это время.
			 * Я думаю ты сам догадаешься как это сделать, но мой совет сначала посмотреть гайды
			 * по таким штукам и как это делают крутые ребята.
			 *
			 * Хотя кто знает, может крутые ребята так и делают :)
			 * Пока что я не писал интернет-магазины, со следующей недели начну писать
			 * сайт для адвокатский курсов в Новой Зеландии, возможно я столкнусь с этим
			 * Я дал тебе несколько советов, но использовавть их или нет - решай сам.
			 * Каждый дрочет так как хочет, поэтому не факт что то, что я написал идеально
			 * Но это лучше чем было :)
			 *
			 * И ещё, используй готовые библиотеки компонентов, так будешь быстрее практиковаться
			 * Есть крутая библиотека vuetify, я на ней написал недавно проект, не стесняйся использовать
			 * библиотеки, зачем изобретать велосипед, НО! Сначала напиши сам, воспроизведи библиотеку
			 * или часть её функций, а потом юзай готовые решения хороших программистов.
			 * Иногда даже необязательно самому писать некоторые вещи вообще :)
 			 */
			if (initial) {
				this.cart = [
					...data.filter(pizza => pizza.id !== id),
					{
						...initial,
						counter: initial.counter + 1,
						total: initial.total + this.products[id].totalPrice
					}
				]
			} else {
				this.cart = [
					...data,
					{
						...this.products[id],
						counter: 1,
						total: this.products[id].totalPrice
					}
				]
			}
		}
	}
}

const app = Vue.createApp(App)
app.mount('#app')
